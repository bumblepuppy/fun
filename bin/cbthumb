#!/usr/bin/perl

# vim: filetype=perl5
#
# needs unrar
# needs unzip
# needs imagemagic "convert" utility
# needs gs (ghostscript)
#

use feature qw(say);
use warnings;
use strict;
use autodie;
use Data::Dumper;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Number::Bytes::Human qw(format_bytes);
use Term::ReadLine;
use File::Basename qw(basename);
use Getopt::Long qw(GetOptions);
use URI::Encode;


my $test;
my $noprompt;

GetOptions("test"     => \$test,
           "noprompt" => \$noprompt)
    or die "Error in command line arguments.\n";

my %files;
my %unduplicated;
my $term = Term::ReadLine->new('CB[RZ] deduper');
my $remaining_bytes = 0;

sub is_variant_cover {
    my $file_name = shift;
    return 1 if $file_name =~ /variant/i;
    # file size < 5MB probably means it is a cover by itself
    return 1 if (stat $file_name)[7] < 5_000_000;
    return 0;
}

sub add_entry {
    my $file_name = shift;
    my $key = canonicalize($file_name);
    $files{$key} ||= []; 
    push @{$files{$key}} ,$file_name;
}

sub canonicalize {
    my $file_name = shift;
    $file_name = basename($file_name);     #strip directory if there
    $file_name =~ s/\.cb[rz]$//i;          #strip file type
    $file_name =~ s/\([^\(\)]*?\)//g;      #get rid of anything inside any ()'s
    $file_name =~ s/\s+/ /g;               #replace multiple whitespace chars with one
    $file_name =~ s/^\s+//;                #strip leading whitespace
    $file_name =~ s/\s+$//;                #strip trailing whitespace
    $file_name =~ s/(\b)0+(\d+\b)/$1$2/g;  #strip leading zeroes in numbers
    $file_name = lc $file_name;
    return $file_name;
}

sub make_thumbnail_from_first_page { 
    my ($archive_file, $first_page) = @_;
    my $thumbnail_name = "$archive_file.jpg";
    system("convert", $first_page, "-resize", "400x615", $thumbnail_name);
    unlink($first_page);
}

opendir (my $dir_handle,".") || die "can't opendir '.' ";
my @cbr_files = grep { /\.cbr$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
my @cbz_files = grep { /\.cbz$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
my @pdf_files = grep { /\.pdf$/i && -f } readdir($dir_handle);

say "cbr_files",@cbr_files;

for (@cbr_files) {
    my $rar_file = $_;
    my $quoted_rar_file = quotemeta($rar_file);
    my $first_page;
    open(my $lines, "unrar -t $quoted_rar_file |") || die "can't open quoted rar file: $!";
    my @jpgs;
    while (<$lines>) {
 	chomp;
	next unless /\.jpg$/i;
	next unless /\d\d\d/;
	push @jpgs, $_;
    }
    @jpgs = sort @jpgs;
    $first_page = $jpgs[0];
    $first_page =~ s/^\s+//;
    system("unrar", $rar_file, $first_page);
    make_thumbnail_from_first_page($rar_file,$first_page);
    say "rarfile:",$rar_file;
}

for (@cbz_files) {
    my $zip_file = $_;
    my $quoted_zip_file = quotemeta($zip_file);
    say "zip_file:",$zip_file;
    say "quoted:",$quoted_zip_file;
    my $first_page;
    open(my $lines, "unzip -l $quoted_zip_file |") || die "can't open quoted zip file: $!";
    my @jpgs;
    while (<$lines>) {
	my $path;
	chomp;
	next unless /\.jpg$/i;
	next unless /\s+\d+\s+\d{4}\-\d\d\-\d\d\s+\d\d\:\d\d\s+(\S+.*)$/;
	$path = $1;
	push @jpgs, $path;
    }
    @jpgs = sort @jpgs;
    $first_page = $jpgs[0];
    $first_page =~ s/^\s+//;
    say "first page:",$first_page;
    system("unzip","-u", $zip_file, $first_page);
    make_thumbnail_from_first_page($zip_file,$first_page);
}

for (@pdf_files) {
    system("gs",
	   "-dBATCH",
	   "-dNOPAUSE",
	   "-dSAFER",
	   "-dFirstPage=1",
	   "-dLastPage=1",
	   "-sDEVICE=jpeg",
	   "-dJPEGQ=30",
	   "-r400x615",
	   "-sOutputFile=$_.jpg",
	   $_
	);
}

opendir (my $dir_handle,".") || die "can't opendir '.' ";
@cbr_files = grep { /\.cbr$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
@cbz_files = grep { /\.cbz$/i && -f } readdir($dir_handle);
rewinddir($dir_handle);
@pdf_files = grep { /\.pdf$/i && -f } readdir($dir_handle);


open my $index_file, ">", "index.html";

select $index_file;
say "<html>";
say "<head><title>comic index</title></head>";
say "<body>";

for (@cbr_files, @cbz_files, @pdf_files) {
    my $archive = URI::Encode::uri_encode($_);
    say "<a href=\"$archive\"><img src=\"$archive.jpg\" height=\"600\" width=\"415\"></a><br><br>";
}

say "</body>";
say "</html>";
close $index_file;    
    
